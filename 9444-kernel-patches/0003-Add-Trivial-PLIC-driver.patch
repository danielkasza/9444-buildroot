From 5e5d0bb8f0566ecdbbbc34ed5400f274448dee6a Mon Sep 17 00:00:00 2001
From: Daniel Kasza <daniel@kasza.hu>
Date: Sun, 29 Mar 2020 16:19:26 -0400
Subject: [PATCH 3/5] Add Trivial PLIC driver.

---
 drivers/irqchip/Kconfig            |  12 +++
 drivers/irqchip/Makefile           |   1 +
 drivers/irqchip/irq-trivial-plic.c | 165 +++++++++++++++++++++++++++++
 3 files changed, 178 insertions(+)
 create mode 100644 drivers/irqchip/irq-trivial-plic.c

diff --git a/drivers/irqchip/Kconfig b/drivers/irqchip/Kconfig
index 97f9c001d..cf32e4cfd 100644
--- a/drivers/irqchip/Kconfig
+++ b/drivers/irqchip/Kconfig
@@ -495,4 +495,16 @@ config SIFIVE_PLIC
 
 	   If you don't know what to do here, say Y.
 
+config TRIVIAL_PLIC
+	bool "Trivial Platform-Level Interrupt Controller"
+	depends on RISCV
+	help
+	   This enables support for the PLIC chip found in 9444 (and
+	   potentially other) RISC-V systems.  The PLIC controls devices
+	   interrupts and connects them to each core's local interrupt
+	   controller.  Aside from timer and software interrupts, all other
+	   interrupt sources are subordinate to the PLIC.
+
+	   If you don't know what to do here, say Y.
+
 endmenu
diff --git a/drivers/irqchip/Makefile b/drivers/irqchip/Makefile
index cc7c43932..455e47652 100644
--- a/drivers/irqchip/Makefile
+++ b/drivers/irqchip/Makefile
@@ -98,6 +98,7 @@ obj-$(CONFIG_QCOM_PDC)			+= qcom-pdc.o
 obj-$(CONFIG_CSKY_MPINTC)		+= irq-csky-mpintc.o
 obj-$(CONFIG_CSKY_APB_INTC)		+= irq-csky-apb-intc.o
 obj-$(CONFIG_SIFIVE_PLIC)		+= irq-sifive-plic.o
+obj-$(CONFIG_TRIVIAL_PLIC)		+= irq-trivial-plic.o
 obj-$(CONFIG_IMX_IRQSTEER)		+= irq-imx-irqsteer.o
 obj-$(CONFIG_MADERA_IRQ)		+= irq-madera.o
 obj-$(CONFIG_LS1X_IRQ)			+= irq-ls1x.o
diff --git a/drivers/irqchip/irq-trivial-plic.c b/drivers/irqchip/irq-trivial-plic.c
new file mode 100644
index 000000000..a003a206a
--- /dev/null
+++ b/drivers/irqchip/irq-trivial-plic.c
@@ -0,0 +1,165 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2017 SiFive
+ * Copyright (C) 2018 Christoph Hellwig
+ * Copyright (C) 2020 Daniel Kasza
+ */
+#define pr_fmt(fmt) "tplic: " fmt
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/irq.h>
+#include <linux/irqchip.h>
+#include <linux/irqdomain.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_irq.h>
+#include <linux/platform_device.h>
+#include <linux/spinlock.h>
+#include <asm/smp.h>
+
+/*
+ * This is the driver for the Trivial PLIC for the 9444 CPU.
+ * It is based on an older version of the SiFive PLIC driver
+ */
+
+#define ENABLER			0x0000
+#define CLAIMR			0x0004
+
+static void __iomem 		*plic_regs;
+static raw_spinlock_t		enable_lock;
+
+static inline void plic_toggle(int hwirq, int enable)
+{
+	u32 __iomem *reg = plic_regs + ENABLER;
+	u32 hwirq_mask = 1 << hwirq;
+
+	raw_spin_lock(&enable_lock);
+	if (enable)
+		writel(readl(reg) | hwirq_mask, reg);
+	else
+		writel(readl(reg) & ~hwirq_mask, reg);
+	raw_spin_unlock(&enable_lock);
+}
+
+static void plic_irq_enable(struct irq_data *d)
+{
+	plic_toggle(d->hwirq, 1);
+}
+
+static void plic_irq_disable(struct irq_data *d)
+{
+	plic_toggle(d->hwirq, 0);
+}
+
+static struct irq_chip plic_chip = {
+	.name		= "Trivial PLIC",
+	/*
+	 * There is no need to mask/unmask PLIC interrupts.  They are "masked"
+	 * by reading claim and "unmasked" when writing it back.
+	 */
+	.irq_enable	= plic_irq_enable,
+	.irq_disable	= plic_irq_disable,
+};
+
+static int plic_irqdomain_map(struct irq_domain *d, unsigned int irq,
+			      irq_hw_number_t hwirq)
+{
+	irq_set_chip_and_handler(irq, &plic_chip, handle_simple_irq);
+	irq_set_chip_data(irq, NULL);
+	irq_set_noprobe(irq);
+	return 0;
+}
+
+static const struct irq_domain_ops plic_irqdomain_ops = {
+	.map		= plic_irqdomain_map,
+	.xlate		= irq_domain_xlate_onecell,
+};
+
+static struct irq_domain *plic_irqdomain;
+
+/*
+ * Handling an interrupt is a two-step process: first you claim the interrupt
+ * by reading the claim register, then you complete the interrupt by writing
+ * that source ID back to the same claim register.  This automatically enables
+ * and disables the interrupt, so there's nothing else to do.
+ */
+static void plic_handle_irq(struct pt_regs *regs)
+{
+	void __iomem *claim = plic_regs + CLAIMR;
+	irq_hw_number_t hwirq;
+
+	csr_clear(sie, SIE_SEIE);
+	while ((hwirq = readl(claim))) {
+		int irq = irq_find_mapping(plic_irqdomain, hwirq);
+
+		if (unlikely(irq <= 0))
+			pr_warn_ratelimited("can't find mapping for hwirq %lu\n",
+					hwirq);
+		else
+			generic_handle_irq(irq);
+		writel(hwirq, claim);
+	}
+	csr_set(sie, SIE_SEIE);
+}
+
+static int __init plic_init(struct device_node *node,
+		struct device_node *parent)
+{
+	int error = 0, nr_contexts, nr_handlers = 0, i;
+	u32 nr_irqs = 31;
+
+	if (plic_regs) {
+		pr_warn("PLIC already present.\n");
+		return -ENXIO;
+	}
+
+	plic_regs = of_iomap(node, 0);
+	if (WARN_ON(!plic_regs))
+		return -EIO;
+
+	error = -EINVAL;
+
+	nr_contexts = of_irq_count(node);
+	if (WARN_ON(!nr_contexts))
+		goto out_iounmap;
+	if (WARN_ON(nr_contexts < num_possible_cpus()))
+		goto out_iounmap;
+
+	error = -ENOMEM;
+	plic_irqdomain = irq_domain_add_linear(node, nr_irqs + 1,
+			&plic_irqdomain_ops, NULL);
+	if (WARN_ON(!plic_irqdomain))
+		goto out_iounmap;
+
+	for (i = 0; i < nr_contexts; i++) {
+		struct of_phandle_args parent;
+
+		if (of_irq_parse_one(node, i, &parent)) {
+			pr_err("failed to parse parent for context %d.\n", i);
+			continue;
+		}
+
+		/* skip contexts other than supervisor external interrupt */
+		if (parent.args[0] != IRQ_S_EXT)
+			continue;
+
+		nr_handlers++;
+
+		raw_spin_lock_init(&enable_lock);
+
+		/* We do not expect more than one context to be used. */
+		break;
+	}
+
+	pr_info("mapped %d interrupts with %d handlers for %d contexts.\n",
+		nr_irqs, nr_handlers, nr_contexts);
+	set_handle_irq(plic_handle_irq);
+	return 0;
+
+out_iounmap:
+	iounmap(plic_regs);
+	return error;
+}
+
+IRQCHIP_DECLARE(trivial_plic, "dkasza,trivial-plic", plic_init);
-- 
2.17.1

